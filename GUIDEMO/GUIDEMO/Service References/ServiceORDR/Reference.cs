//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GUIDEMO.ServiceORDR {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceORDR.IServiceORDR")]
    public interface IServiceORDR {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/addORDR", ReplyAction="http://tempuri.org/IServiceORDR/addORDRResponse")]
        string addORDR(BusinesObject.BO_ORDR obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/addORDR", ReplyAction="http://tempuri.org/IServiceORDR/addORDRResponse")]
        System.Threading.Tasks.Task<string> addORDRAsync(BusinesObject.BO_ORDR obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/updateORDR", ReplyAction="http://tempuri.org/IServiceORDR/updateORDRResponse")]
        string updateORDR(BusinesObject.BO_ORDR obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/updateORDR", ReplyAction="http://tempuri.org/IServiceORDR/updateORDRResponse")]
        System.Threading.Tasks.Task<string> updateORDRAsync(BusinesObject.BO_ORDR obj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/deleteORDR", ReplyAction="http://tempuri.org/IServiceORDR/deleteORDRResponse")]
        string deleteORDR(int keyDocEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/deleteORDR", ReplyAction="http://tempuri.org/IServiceORDR/deleteORDRResponse")]
        System.Threading.Tasks.Task<string> deleteORDRAsync(int keyDocEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/ShowORDR", ReplyAction="http://tempuri.org/IServiceORDR/ShowORDRResponse")]
        System.Data.DataTable ShowORDR();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/ShowORDR", ReplyAction="http://tempuri.org/IServiceORDR/ShowORDRResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> ShowORDRAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByDate", ReplyAction="http://tempuri.org/IServiceORDR/searchByDateResponse")]
        System.Data.DataTable searchByDate(string key1, string key2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByDate", ReplyAction="http://tempuri.org/IServiceORDR/searchByDateResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByDateAsync(string key1, string key2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByNoOfTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByNoOfTransResponse")]
        System.Data.DataTable searchByNoOfTrans(string noOfTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByNoOfTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByNoOfTransResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByNoOfTransAsync(string noOfTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchDocument", ReplyAction="http://tempuri.org/IServiceORDR/searchDocumentResponse")]
        System.Data.DataTable searchDocument(string status, string cardName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchDocument", ReplyAction="http://tempuri.org/IServiceORDR/searchDocumentResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchDocumentAsync(string status, string cardName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByDateAndStatus", ReplyAction="http://tempuri.org/IServiceORDR/searchByDateAndStatusResponse")]
        System.Data.DataTable searchByDateAndStatus(string fdate, string tdate, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByDateAndStatus", ReplyAction="http://tempuri.org/IServiceORDR/searchByDateAndStatusResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByDateAndStatusAsync(string fdate, string tdate, string status);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByNoOfTranAndBTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByNoOfTranAndBTransResponse")]
        System.Data.DataTable searchByNoOfTranAndBTrans(string noOfTran, string bTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByNoOfTranAndBTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByNoOfTranAndBTransResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByNoOfTranAndBTransAsync(string noOfTran, string bTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByBTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByBTransResponse")]
        System.Data.DataTable searchByBTrans(string buTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByBTrans", ReplyAction="http://tempuri.org/IServiceORDR/searchByBTransResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByBTransAsync(string buTrans);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/CheckDoc", ReplyAction="http://tempuri.org/IServiceORDR/CheckDocResponse")]
        bool CheckDoc(int docentry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/CheckDoc", ReplyAction="http://tempuri.org/IServiceORDR/CheckDocResponse")]
        System.Threading.Tasks.Task<bool> CheckDocAsync(int docentry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/CheckExists", ReplyAction="http://tempuri.org/IServiceORDR/CheckExistsResponse")]
        bool CheckExists(string idDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/CheckExists", ReplyAction="http://tempuri.org/IServiceORDR/CheckExistsResponse")]
        System.Threading.Tasks.Task<bool> CheckExistsAsync(string idDocNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/SearchDocumentAll", ReplyAction="http://tempuri.org/IServiceORDR/SearchDocumentAllResponse")]
        System.Data.DataTable SearchDocumentAll(string status, string cardCode, string docNum, System.DateTime fDate, System.DateTime tDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/SearchDocumentAll", ReplyAction="http://tempuri.org/IServiceORDR/SearchDocumentAllResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> SearchDocumentAllAsync(string status, string cardCode, string docNum, System.DateTime fDate, System.DateTime tDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/NextID", ReplyAction="http://tempuri.org/IServiceORDR/NextIDResponse")]
        string NextID();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/NextID", ReplyAction="http://tempuri.org/IServiceORDR/NextIDResponse")]
        System.Threading.Tasks.Task<string> NextIDAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByCardCode", ReplyAction="http://tempuri.org/IServiceORDR/searchByCardCodeResponse")]
        System.Data.DataTable searchByCardCode(string cardCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/searchByCardCode", ReplyAction="http://tempuri.org/IServiceORDR/searchByCardCodeResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> searchByCardCodeAsync(string cardCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/GetMaxidDocNum", ReplyAction="http://tempuri.org/IServiceORDR/GetMaxidDocNumResponse")]
        int GetMaxidDocNum();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/GetMaxidDocNum", ReplyAction="http://tempuri.org/IServiceORDR/GetMaxidDocNumResponse")]
        System.Threading.Tasks.Task<int> GetMaxidDocNumAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/SumLineTotalBeforDis", ReplyAction="http://tempuri.org/IServiceORDR/SumLineTotalBeforDisResponse")]
        double SumLineTotalBeforDis(int docEntry);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceORDR/SumLineTotalBeforDis", ReplyAction="http://tempuri.org/IServiceORDR/SumLineTotalBeforDisResponse")]
        System.Threading.Tasks.Task<double> SumLineTotalBeforDisAsync(int docEntry);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceORDRChannel : GUIDEMO.ServiceORDR.IServiceORDR, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceORDRClient : System.ServiceModel.ClientBase<GUIDEMO.ServiceORDR.IServiceORDR>, GUIDEMO.ServiceORDR.IServiceORDR {
        
        public ServiceORDRClient() {
        }
        
        public ServiceORDRClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceORDRClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceORDRClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceORDRClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string addORDR(BusinesObject.BO_ORDR obj) {
            return base.Channel.addORDR(obj);
        }
        
        public System.Threading.Tasks.Task<string> addORDRAsync(BusinesObject.BO_ORDR obj) {
            return base.Channel.addORDRAsync(obj);
        }
        
        public string updateORDR(BusinesObject.BO_ORDR obj) {
            return base.Channel.updateORDR(obj);
        }
        
        public System.Threading.Tasks.Task<string> updateORDRAsync(BusinesObject.BO_ORDR obj) {
            return base.Channel.updateORDRAsync(obj);
        }
        
        public string deleteORDR(int keyDocEntry) {
            return base.Channel.deleteORDR(keyDocEntry);
        }
        
        public System.Threading.Tasks.Task<string> deleteORDRAsync(int keyDocEntry) {
            return base.Channel.deleteORDRAsync(keyDocEntry);
        }
        
        public System.Data.DataTable ShowORDR() {
            return base.Channel.ShowORDR();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ShowORDRAsync() {
            return base.Channel.ShowORDRAsync();
        }
        
        public System.Data.DataTable searchByDate(string key1, string key2) {
            return base.Channel.searchByDate(key1, key2);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByDateAsync(string key1, string key2) {
            return base.Channel.searchByDateAsync(key1, key2);
        }
        
        public System.Data.DataTable searchByNoOfTrans(string noOfTrans) {
            return base.Channel.searchByNoOfTrans(noOfTrans);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByNoOfTransAsync(string noOfTrans) {
            return base.Channel.searchByNoOfTransAsync(noOfTrans);
        }
        
        public System.Data.DataTable searchDocument(string status, string cardName) {
            return base.Channel.searchDocument(status, cardName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchDocumentAsync(string status, string cardName) {
            return base.Channel.searchDocumentAsync(status, cardName);
        }
        
        public System.Data.DataTable searchByDateAndStatus(string fdate, string tdate, string status) {
            return base.Channel.searchByDateAndStatus(fdate, tdate, status);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByDateAndStatusAsync(string fdate, string tdate, string status) {
            return base.Channel.searchByDateAndStatusAsync(fdate, tdate, status);
        }
        
        public System.Data.DataTable searchByNoOfTranAndBTrans(string noOfTran, string bTrans) {
            return base.Channel.searchByNoOfTranAndBTrans(noOfTran, bTrans);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByNoOfTranAndBTransAsync(string noOfTran, string bTrans) {
            return base.Channel.searchByNoOfTranAndBTransAsync(noOfTran, bTrans);
        }
        
        public System.Data.DataTable searchByBTrans(string buTrans) {
            return base.Channel.searchByBTrans(buTrans);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByBTransAsync(string buTrans) {
            return base.Channel.searchByBTransAsync(buTrans);
        }
        
        public bool CheckDoc(int docentry) {
            return base.Channel.CheckDoc(docentry);
        }
        
        public System.Threading.Tasks.Task<bool> CheckDocAsync(int docentry) {
            return base.Channel.CheckDocAsync(docentry);
        }
        
        public bool CheckExists(string idDocNum) {
            return base.Channel.CheckExists(idDocNum);
        }
        
        public System.Threading.Tasks.Task<bool> CheckExistsAsync(string idDocNum) {
            return base.Channel.CheckExistsAsync(idDocNum);
        }
        
        public System.Data.DataTable SearchDocumentAll(string status, string cardCode, string docNum, System.DateTime fDate, System.DateTime tDate) {
            return base.Channel.SearchDocumentAll(status, cardCode, docNum, fDate, tDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> SearchDocumentAllAsync(string status, string cardCode, string docNum, System.DateTime fDate, System.DateTime tDate) {
            return base.Channel.SearchDocumentAllAsync(status, cardCode, docNum, fDate, tDate);
        }
        
        public string NextID() {
            return base.Channel.NextID();
        }
        
        public System.Threading.Tasks.Task<string> NextIDAsync() {
            return base.Channel.NextIDAsync();
        }
        
        public System.Data.DataTable searchByCardCode(string cardCode) {
            return base.Channel.searchByCardCode(cardCode);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> searchByCardCodeAsync(string cardCode) {
            return base.Channel.searchByCardCodeAsync(cardCode);
        }
        
        public int GetMaxidDocNum() {
            return base.Channel.GetMaxidDocNum();
        }
        
        public System.Threading.Tasks.Task<int> GetMaxidDocNumAsync() {
            return base.Channel.GetMaxidDocNumAsync();
        }
        
        public double SumLineTotalBeforDis(int docEntry) {
            return base.Channel.SumLineTotalBeforDis(docEntry);
        }
        
        public System.Threading.Tasks.Task<double> SumLineTotalBeforDisAsync(int docEntry) {
            return base.Channel.SumLineTotalBeforDisAsync(docEntry);
        }
    }
}
